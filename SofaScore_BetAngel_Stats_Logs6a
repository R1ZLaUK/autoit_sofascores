#include <Inet.au3>
#include <json.au3>
#include <Array.au3>
#include <String.au3>
#include <File.au3>
#include <UnixTime.au3>

$TitleString = "Team|Score"

; Global halftime tracking Global $HalftimeEvents[0][2] ; [EventID, HalftimeStartTimestamp]

; Logging Functions Func LogError($message) Local $debugFile = IniRead("config.ini", "Paths", "DebugFile", "debug.json") Local $log = FileOpen($debugFile, 1) ; Append mode If $log = -1 Then ConsoleWrite("ERROR: Could not open debug file: " & $debugFile & @CRLF) Return EndIf FileWriteLine($log, @YEAR & "-" & @MON & "-" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " ERROR: " & $message) FileClose($log) EndFunc

Func LogMessage($level, $message) Local $debugFile = IniRead("config.ini", "Paths", "DebugFile", "debug.json") Local $log = FileOpen($debugFile, 1) ; Append mode If $log = -1 Then ConsoleWrite("ERROR: Could not open debug file: " & $debugFile & @CRLF) Return EndIf FileWriteLine($log, @YEAR & "-" & @MON & "-" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " " & $level & ": " & $message) FileClose($log) EndFunc

Func IsInHalftime($eventId) For $i = 0 To UBound($HalftimeEvents) - 1 If $HalftimeEvents[$i][0] = $eventId Then Local $halftimeStart = $HalftimeEvents[$i][1] Local $currentTime = _TimeGetStamp() If ($currentTime - $halftimeStart) <= 900 ; 15 minutes = 900 seconds LogMessage("DEBUG", "Event ID " & $eventId & " is in halftime, skipping all stats") Return True Else ; Remove expired halftime entry _ArrayDelete($HalftimeEvents, $i) LogMessage("DEBUG", "Halftime ended for event ID " & $eventId) Return False EndIf EndIf Next Return False EndFunc

; Read configuration from .ini file $ConfigFile = "C:\Users\jking\Documents\betangel bots\1. AutoIt\1.Config\config.ini" If Not FileExists($ConfigFile) Then LogError("Config file " & $ConfigFile & " does not exist") ConsoleWrite("Error: Config file " & $ConfigFile & " does not exist" & @CRLF) Exit EndIf LogMessage("INFO", "Loaded configuration from " & $ConfigFile)

; Paths $ScriptDir = IniRead($ConfigFile, "Paths", "ScriptDir", "C:\Users\jking\Documents\betangel bots\1. AutoIt\1.Config") $ScoreFile = $ScriptDir & "" & IniRead($ConfigFile, "Paths", "ScoreFile", "score.csv") $TempScoreFile = $ScriptDir & "" & IniRead($ConfigFile, "Paths", "TempScoreFile", "score_temp.csv") $TestFile = $ScriptDir & "" & IniRead($ConfigFile, "Paths", "TestFile", "test.json") $DebugFile = $ScriptDir & "" & IniRead($ConfigFile, "Paths", "DebugFile", "debug.json")

; API URLs $EventsURL = IniRead($ConfigFile, "API", "EventsURL", "https://api.sofascore.com/api/v1/sport/football/events/live") $IncidentsURLTemplate = IniRead($ConfigFile, "API", "IncidentsURL", "https://api.sofascore.com/api/v1/event/{EventID}/incidents") $StatsURLTemplate = IniRead($ConfigFile, "API", "StatsURL", "https://api.sofascore.com/api/v1/event/{EventID}/statistics") $GraphURLTemplate = IniRead($ConfigFile, "API", "GraphURL", "https://api.sofascore.com/api/v1/event/{EventID}/graph") $H2HURLTemplate = IniRead($ConfigFile, "API", "H2HURL", "https://www.sofascore.com/api/v1/event/{EventID}/h2h") $PregameFormURLTemplate = IniRead($ConfigFile, "API", "PregameFormURL", "https://www.sofascore.com/api/v1/event/{EventID}/pregame-form") LogMessage("INFO", "Loaded API URLs: H2H=" & $H2HURLTemplate & ", PregameForm=" & $PregameFormURLTemplate)

; Tournaments $HighQualityTournaments = StringSplit(IniRead($ConfigFile, "HighQualityTournaments", "HighQualityTournaments", "17,8,35,23,34,7,18,37"), ",", $STR_NOCOUNT) $LowQualityTournaments = StringSplit(IniRead($ConfigFile, "LowQualityTournaments", "LowQualityTournaments", ""), ",", $STR_NOCOUNT) LogMessage("INFO", "Loaded " & UBound($HighQualityTournaments) & " high-quality and " & UBound($LowQualityTournaments) & " low-quality tournaments")

; Team mappings Local $TeamMap[0][2] $TeamSection = IniReadSection($ConfigFile, "TeamMappings") If Not @error Then ReDim $TeamMap[$TeamSection[0][0]][2] For $i = 1 To $TeamSection[0][0] Local $Pair = StringSplit($TeamSection[$i][1], ",", $STR_NOCOUNT) If UBound($Pair) = 2 Then $TeamMap[$i-1][0] = $Pair[0] $TeamMap[$i-1][1] = $Pair[1] EndIf Next EndIf LogMessage("INFO", "Loaded " & UBound($TeamMap) & " team mappings")

; Settings $SleepFirstHalf = Int(IniRead($ConfigFile, "Settings", "SleepFirstHalf", "15000")) $SleepSecondHalf = Int(IniRead($ConfigFile, "Settings", "SleepSecondHalf", "30000")) $MaxGameTime = Int(IniRead($ConfigFile, "Settings", "MaxGameTime", "120")) $FetchIncidentsForLowQuality = IniRead($ConfigFile, "Settings", "FetchIncidentsForLowQuality", "true") = "true" LogMessage("INFO", "Settings: SleepFirstHalf=" & $SleepFirstHalf & "ms, SleepSecondHalf=" & $SleepSecondHalf & "ms, MaxGameTime=" & $MaxGameTime & "min, FetchIncidentsForLowQuality=" & $FetchIncidentsForLowQuality)

DirCreate($ScriptDir)

Global $CycleCount = 0 Global $GameTimeMinutes = 0 ; Initialize globally for sleep logic

While 1 $CycleCount += 1 LogMessage("INFO", "Starting cycle " & $CycleCount & " at " & _StringFormatTime("%Y-%m-%d %H:%M:%S", _TimeGetStamp())) ConsoleWrite("=== Starting cycle " & $CycleCount & " at " & _StringFormatTime("%Y-%m-%d %H:%M:%S", _TimeGetStamp()) & " ===" & @CRLF)

; Verify directory
If Not FileExists($ScriptDir) Then
    LogError("Directory " & $ScriptDir & " does not exist")
    ConsoleWrite("Error: Directory " & $ScriptDir & " does not exist" & @CRLF)
    Sleep($SleepSecondHalf)
    ContinueLoop
EndIf

; Fetch live events
LogMessage("DEBUG", "Fetching live events from " & $EventsURL)
ConsoleWrite("Fetching live events from API" & @CRLF)
$data = _INetGetSource($EventsURL)
If @error Then
    LogError("Failed to fetch events from " & $EventsURL & ", error code: " & @error)
    ConsoleWrite("Error: Failed to fetch events from " & $EventsURL & ", error code: " & @error & @CRLF)
    Sleep(60000)
    ContinueLoop
EndIf
LogMessage("DEBUG", "Events API response length: " & StringLen($data) & " bytes")
ConsoleWrite("Events API response length: " & StringLen($data) & " bytes, first 200 chars: " & StringLeft($data, 200) & @CRLF)

; Save raw events response for debugging (every 10 cycles)
If Mod($CycleCount, 10) = 0 Then
    Local $hDebugFile = FileOpen($DebugFile, 2)
    If $hDebugFile <> -1 Then
        FileWrite($hDebugFile, $data)
        FileClose($hDebugFile)
        LogMessage("INFO", "Saved raw events response to " & $DebugFile)
        ConsoleWrite("Saved raw events response to " & $DebugFile & @CRLF)
    Else
        LogError("Failed to write debug file " & $DebugFile & ", Windows error: " & _WinAPI_GetLastError())
        ConsoleWrite("Error: Failed to write debug file " & $DebugFile & ", Windows error: " & _WinAPI_GetLastError() & @CRLF)
    EndIf
EndIf

$object = json_decode($data)
If @error Then
    LogError("Failed to decode events JSON, error code: " & @error)
    ConsoleWrite("Error: Failed to decode events JSON, error code: " & @error & @CRLF)
    Sleep($SleepSecondHalf)
    ContinueLoop
EndIf

Local $Count = Json_Get($object, '.events')
If @error Or Not IsArray($Count) Then
    LogError("Failed to access events array or not an array, JSON error: " & @error)
    ConsoleWrite("Error: Failed to access events array or not an array, JSON error: " & @error & @CRLF)
    Sleep($SleepSecondHalf)
    ContinueLoop
EndIf
LogMessage("INFO", "Found " & UBound($Count) & " live events")
ConsoleWrite("Found " & UBound($Count) & " live events" & @CRLF)

Local $ProcessedEvents = 0
Local $ScoreBuffer = "1" & @CRLF ; Bet Angel data format code

; Process all events
For $i = 0 To UBound($Count) - 1
    LogMessage("DEBUG", "Processing event index " & $i)
    ConsoleWrite("Starting processing for event index " & $i & @CRLF)
    Local $Event = Json_Get($object, '.events[' & $i & ']')

    ; Get tournament details
    $TournamentID = Json_Get($Event, '.tournament.uniqueTournament.id')
    If @error Or $TournamentID = "" Then
        $TournamentID = Json_Get($Event, '.tournament.id')
        If @error Or $TournamentID = "" Then
            LogError("Failed to access tournament ID for event index " & $i & ", JSON error: " & @error)
            ConsoleWrite("Error: Failed to access tournament ID for event index " & $i & ", JSON error: " & @error & @CRLF)
            ContinueLoop
        EndIf
    EndIf
    Local $IsHighQuality = _ArraySearch($HighQualityTournaments, $TournamentID) <> -1
    Local $IsLowQuality = _ArraySearch($LowQualityTournaments, $TournamentID) <> -1
    If Not $IsHighQuality And Not $IsLowQuality Then
        LogMessage("DEBUG", "Skipping event from tournament ID " & $TournamentID & " (not in high or low-quality list)")
        ConsoleWrite("Skipping event from tournament ID " & $TournamentID & " (not in high or low-quality list)" & @CRLF)
        ContinueLoop
    EndIf
    $TournamentName = Json_Get($Event, '.tournament.name')
    If @error Then
        LogError("Failed to access tournament name for event index " & $i & ", JSON error: " & @error)
        ConsoleWrite("Error: Failed to access tournament name for event index " & $i & ", JSON error: " & @error & @CRLF)
        ContinueLoop
    EndIf
    LogMessage("INFO", "Processing event from tournament: " & $TournamentName & " (ID: " & $TournamentID & ", Quality: " & ($IsHighQuality ? "High" : "Low") & ")")
    ConsoleWrite("Processing event from tournament: " & $TournamentName & " (ID: " & $TournamentID & ", Quality: " & ($IsHighQuality ? "High" : "Low") & ")" & @CRLF)

    $HomeTeamRaw = Json_Get($Event, '.homeTeam.name')
    If @error Or $HomeTeamRaw = "" Then
        LogError("Failed to access home team name for event index " & $i & ", JSON error: " & @error)
        ConsoleWrite("Error: Failed to access home team name for event index " & $i & ", JSON error: " & @error & @CRLF)
        ContinueLoop
    EndIf
    $AwayTeamRaw = Json_Get($Event, '.awayTeam.name')
    If @error Or $AwayTeamRaw = "" Then
        LogError("Failed to access away team name for event index " & $i & ", JSON error: " & @error)
        ConsoleWrite("Error: Failed to access away team name for event index " & $i & ", JSON error: " & @error & @CRLF)
        ContinueLoop
    EndIf
    $HomeTeam = MapTeamName(_StringReplaceAccent($HomeTeamRaw))
    $AwayTeam = MapTeamName(_StringReplaceAccent($AwayTeamRaw))
    If $HomeTeam = "NotFound" Or $AwayTeam = "NotFound" Then
        LogError("Team name processing failed - Home: " & $HomeTeamRaw & " -> " & $HomeTeam & ", Away: " & $AwayTeamRaw & " -> " & $AwayTeam)
        ConsoleWrite("Error: Team name processing failed - Home: " & $HomeTeamRaw & " -> " & $HomeTeam & ", Away: " & $AwayTeamRaw & " -> " & $AwayTeam & @CRLF)
        ContinueLoop
    EndIf
    LogMessage("DEBUG", "Raw home team: " & $HomeTeamRaw & ", Processed: " & $HomeTeam)
    LogMessage("DEBUG", "Raw away team: " & $AwayTeamRaw & ", Processed: " & $AwayTeam)
    ConsoleWrite("Raw home team: " & $HomeTeamRaw & ", Processed: " & $HomeTeam & @CRLF)
    ConsoleWrite("Raw away team: " & $AwayTeamRaw & ", Processed: " & $AwayTeam & @CRLF)

    $EventID = Json_Get($Event, '.id')
    If @error Or $EventID = "" Then
        LogError("Failed to access event ID for event index " & $i & ", JSON error: " & @error)
        ConsoleWrite("Error: Failed to access event ID for event index " & $i & ", JSON error: " & @error & @CRLF)
        ContinueLoop
    EndIf
    LogMessage("INFO", "Processing event ID: " & $EventID & ", Home: " & $HomeTeam & ", Away: " & $AwayTeam & ", Tournament: " & $TournamentName & " (ID: " & $TournamentID & ")")
    ConsoleWrite("Processing event ID: " & $EventID & ", Home: " & $HomeTeam & ", Away: " & $AwayTeam & ", Tournament: " & $TournamentName & " (ID: " & $TournamentID & ")" & @CRLF)
    $ProcessedEvents += 1

    ; Get kick-off time and game time
    $StartTimestamp = Json_Get($Event, '.startTimestamp')
    If @error Or $StartTimestamp = "" Or Not StringIsInt($StartTimestamp) Then
        LogError("Failed to get valid startTimestamp for event ID " & $EventID & ", JSON error: " & @error)
        ConsoleWrite("Error: Failed to get valid startTimestamp for event ID " & $EventID & ", JSON error: " & @error & @CRLF)
        ContinueLoop
    EndIf
    $MarketTime = _StringFormatTime("%H:%M", $StartTimestamp)
    $CurrentTime = _TimeGetStamp()
    $GameTimeMinutes = Floor(($CurrentTime - $StartTimestamp) / 60)
    If $GameTimeMinutes < 0 Then $GameTimeMinutes = 0
    If $GameTimeMinutes > $MaxGameTime Then $GameTimeMinutes = $MaxGameTime
    LogMessage("DEBUG", "GameTime for event ID " & $EventID & ": " & $GameTimeMinutes & " minutes")
    ConsoleWrite("GameTime for event ID " & $EventID & ": " & $GameTimeMinutes & " minutes" & @CRLF)

    ; Base CSV strings
    $HomeBase = "," & $MarketTime & "," & $HomeTeam & ",1"
    $AwayBase = "," & $MarketTime & "," & $AwayTeam & ",2"

    ; Initialize SV buffers
    Local $HomeSVs = ""
    Local $AwaySVs = ""
    Local $StatWarnings = ""

    ; Initialize stats
    Local $HomeScore = Json_Get($Event, '.homeScore.current')
    Local $AwayScore = Json_Get($Event, '.awayScore.current')
    If @error Or $HomeScore = "" Then
        LogError("Invalid home score from events endpoint for event ID " & $EventID & ", raw value: " & $HomeScore)
        $HomeScore = "0"
    EndIf
    If @error Or $AwayScore = "" Then
        LogError("Invalid away score from events endpoint for event ID " & $EventID & ", raw value: " & $AwayScore)
        $AwayScore = "0"
    EndIf
    Local $HomeRedCards = 0, $AwayRedCards = 0, $HomeYellowCards = 0, $AwayYellowCards = 0
    Local $H2HHomeWins = 0, $H2HAwayWins = 0, $H2HDraws = 0
    Local $HomeForm = "", $AwayForm = "", $HomePosition = 0, $AwayPosition = 0, $HomePoints = 0, $AwayPoints = 0

    ; Check if in halftime
    If IsInHalftime($EventID) Then
        LogMessage("INFO", "Event ID " & $EventID & " is in halftime, using default stats and events scores")
        ; Use default stats
        $HomeSVs &= ",SS,Score," & $HomeScore
        $AwaySVs &= ",SS,Score," & $AwayScore
        $HomeSVs &= ",SS,GameTime," & $GameTimeMinutes
        $AwaySVs &= ",SS,GameTime," & $GameTimeMinutes
        $HomeSVs &= ",SS,RedCards,0"
        $AwaySVs &= ",SS,RedCards,0"
        $HomeSVs &= ",SS,YellowCards,0"
        $AwaySVs &= ",SS,YellowCards,0"
        $HomeSVs &= ",SS,H2HHomeWins,0,SS,H2HAwayWins,0,SS,H2HDraws,0"
        $AwaySVs &= ",SS,H2HHomeWins,0,SS,H2HAwayWins,0,SS,H2HDraws,0"
        $HomeSVs &= ",SS,HomeForm,,SS,HomePosition,0,SS,HomePoints,0"
        $AwaySVs &= ",SS,AwayForm,,SS,AwayPosition,0,SS,AwayPoints,0"
        If $IsHighQuality Then
            Local $Keys[13] = ["shotsOnGoal", "shotsOffGoal", "totalShotsOnGoal", "cornerKicks", "bigChanceCreated", "fouls", "goalkeeperSaves", "hitWoodwork", "totalShotsInsideBox", "totalShotsOutsideBox", "yellowCards", "expectedGoals", "ballPossession"]
            For $k In $Keys
                Switch $k
                    Case "shotsOnGoal"
                        $HomeSVs &= ",SS,ShotsOnTarget,0"
                        $AwaySVs &= ",SS,ShotsOnTarget,0"
                    Case "shotsOffGoal"
                        $HomeSVs &= ",SS,ShotsOffTarget,0"
                        $AwaySVs &= ",SS,ShotsOffTarget,0"
                    Case "totalShotsOnGoal"
                        $HomeSVs &= ",SS,TotalShots,0"
                        $AwaySVs &= ",SS,TotalShots,0"
                    Case "ballPossession"
                        $HomeSVs &= ",SS,Possession,0"
                        $AwaySVs &= ",SS,Possession,0"
                    Case "cornerKicks"
                        $HomeSVs &= ",SS,Corners,0"
                        $AwaySVs &= ",SS,Corners,0"
                    Case "bigChanceCreated"
                        $HomeSVs &= ",SS,BigChances,0"
                        $AwaySVs &= ",SS,BigChances,0"
                    Case "fouls"
                        $HomeSVs &= ",SS,Fouls,0"
                        $AwaySVs &= ",SS,Fouls,0"
                    Case "goalkeeperSaves"
                        $HomeSVs &= ",SS,Saves,0"
                        $AwaySVs &= ",SS,Saves,0"
                    Case "hitWoodwork"
                        $HomeSVs &= ",SS,HitWoodwork,0"
                        $AwaySVs &= ",SS,HitWoodwork,0"
                    Case "totalShotsInsideBox"
                        $HomeSVs &= ",SS,ShotsInsideBox,0"
                        $AwaySVs &= ",SS,ShotsInsideBox,0"
                    Case "totalShotsOutsideBox"
                        $HomeSVs &= ",SS,ShotsOutsideBox,0"
                        $AwaySVs &= ",SS,ShotsOutsideBox,0"
                    Case "yellowCards"
                        ; Skip, as yellow cards are from incidents
                    Case "expectedGoals"
                        $HomeSVs &= ",SS,ExpectedGoals,0"
                        $AwaySVs &= ",SS,ExpectedGoals,0"
                EndSwitch
            Next
            $HomeSVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
            $AwaySVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
        Else
            Local $Keys[13] = ["shotsOnGoal", "shotsOffGoal", "totalShotsOnGoal", "cornerKicks", "bigChanceCreated", "fouls", "goalkeeperSaves", "hitWoodwork", "totalShotsInsideBox", "totalShotsOutsideBox", "yellowCards", "expectedGoals", "ballPossession"]
            For $k In $Keys
                Switch $k
                    Case "shotsOnGoal"
                        $HomeSVs &= ",SS,ShotsOnTarget,0"
                        $AwaySVs &= ",SS,ShotsOnTarget,0"
                    Case "shotsOffGoal"
                        $HomeSVs &= ",SS,ShotsOffTarget,0"
                        $AwaySVs &= ",SS,ShotsOffTarget,0"
                    Case "totalShotsOnGoal"
                        $HomeSVs &= ",SS,TotalShots,0"
                        $AwaySVs &= ",SS,TotalShots,0"
                    Case "ballPossession"
                        $HomeSVs &= ",SS,Possession,0"
                        $AwaySVs &= ",SS,Possession,0"
                    Case "cornerKicks"
                        $HomeSVs &= ",SS,Corners,0"
                        $AwaySVs &= ",SS,Corners,0"
                    Case "bigChanceCreated"
                        $HomeSVs &= ",SS,BigChances,0"
                        $AwaySVs &= ",SS,BigChances,0"
                    Case "fouls"
                        $HomeSVs &= ",SS,Fouls,0"
                        $AwaySVs &= ",SS,Fouls,0"
                    Case "goalkeeperSaves"
                        $HomeSVs &= ",SS,Saves,0"
                        $AwaySVs &= ",SS,Saves,0"
                    Case "hitWoodwork"
                        $HomeSVs &= ",SS,HitWoodwork,0"
                        $AwaySVs &= ",SS,HitWoodwork,0"
                    Case "totalShotsInsideBox"
                        $HomeSVs &= ",SS,ShotsInsideBox,0"
                        $AwaySVs &= ",SS,ShotsInsideBox,0"
                    Case "totalShotsOutsideBox"
                        $HomeSVs &= ",SS,ShotsOutsideBox,0"
                        $AwaySVs &= ",SS,ShotsOutsideBox,0"
                    Case "yellowCards"
                        ; Skip, as yellow cards are from incidents
                    Case "expectedGoals"
                        $HomeSVs &= ",SS,ExpectedGoals,0"
                        $AwaySVs &= ",SS,ExpectedGoals,0"
                EndSwitch
            Next
            $HomeSVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
            $AwaySVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
        EndIf
    Else
        ; Fetch incidents data for scores and cards
        If $IsHighQuality Or $FetchIncidentsForLowQuality Then
            LogMessage("DEBUG", "Fetching incidents for event ID " & $EventID)
            ConsoleWrite("Fetching incidents for event ID " & $EventID & @CRLF)
            $IncidentsURL = StringReplace($IncidentsURLTemplate, "{EventID}", $EventID)
            $IncidentsData = _INetGetSource($IncidentsURL)
            If Not @error And $IncidentsData <> "" Then
                $IncidentsObject = json_decode($IncidentsData)
                If Not @error Then
                    Local $Incidents = Json_Get($IncidentsObject, '.incidents')
                    If Not @error And IsArray($Incidents) Then
                        For $j = 0 To UBound($Incidents) - 1
                            Local $Incident = Json_Get($Incidents, '[' & $j & ']')
                            Local $Type = Json_Get($Incident, '.incidentType')
                            Local $Time = Json_Get($Incident, '.time')
                            LogMessage("DEBUG", "Processing incident " & $j & " for event ID " & $EventID & ": Type=" & $Type & ", Time=" & $Time)

                            ; Check for halftime
                            If $Type = "period" Then
                                Local $PeriodText = Json_Get($Incident, '.text')
                                Local $IsLive = Json_Get($Incident, '.isLive')
                                If $PeriodText = "First half" And $IsLive Then
                                    Local $found = False
                                    For $k = 0 To UBound($HalftimeEvents) - 1
                                        If $HalftimeEvents[$k][0] = $EventID Then
                                            $found = True
                                            ExitLoop
                                        EndIf
                                    Next
                                    If Not $found Then
                                        Local $newEntry[1][2] = [[$EventID, _TimeGetStamp()]]
                                        _ArrayAdd($HalftimeEvents, $newEntry)
                                        LogMessage("INFO", "Detected halftime for event ID " & $EventID)
                                    EndIf
                                EndIf
                            EndIf

                            ; Handle scores from period or goal incidents
                            If $Type = "period" Or $Type = "goal" Then
                                Local $IncidentHomeScore = Json_Get($Incident, '.homeScore')
                                Local $IncidentAwayScore = Json_Get($Incident, '.awayScore')
                                If Not @error And $IncidentHomeScore <> "" And $IncidentAwayScore <> "" Then
                                    $HomeScore = $IncidentHomeScore
                                    $AwayScore = $IncidentAwayScore
                                    LogMessage("DEBUG", "Updated scores for event ID " & $EventID & ": Home=" & $HomeScore & ", Away=" & $AwayScore & " from " & $Type & " incident")
                                Else
                                    LogError("Invalid score data in " & $Type & " incident for event ID " & $EventID & ": Home=" & $IncidentHomeScore & ", Away=" & $IncidentAwayScore)
                                EndIf
                            EndIf

                            ; Handle cards
                            If $Type = "card" Then
                                Local $CardType = Json_Get($Incident, '.incidentClass')
                                Local $IsHome = Json_Get($Incident, '.isHome')
                                If @error Or $CardType = "" Then
                                    LogError("Invalid card data for incident " & $j & ", event ID " & $EventID & ": CardType=" & $CardType)
                                    ContinueLoop
                                EndIf
                                If $CardType = "red" Then
                                    If $IsHome Then
                                        $HomeRedCards += 1
                                    Else
                                        $AwayRedCards += 1
                                    EndIf
                                    LogMessage("DEBUG", "Red card for event ID " & $EventID & ": " & ($IsHome ? "Home" : "Away") & " at time " & $Time)
                                ElseIf $CardType = "yellow" Then
                                    If $IsHome Then
                                        $HomeYellowCards += 1
                                    Else
                                        $AwayYellowCards += 1
                                    EndIf
                                    LogMessage("DEBUG", "Yellow card for event ID " & $EventID & ": " & ($IsHome ? "Home" : "Away") & " at time " & $Time)
                                EndIf
                            EndIf
                        Next
                        LogMessage("INFO", "Incident stats for event ID " & $EventID & ": HomeScore=" & $HomeScore & ", AwayScore=" & $AwayScore & ", HomeRedCards=" & $HomeRedCards & ", AwayRedCards=" & $AwayRedCards & ", HomeYellowCards=" & $HomeYellowCards & ", AwayYellowCards=" & $AwayYellowCards)
                    Else
                        LogError("Failed to access incidents array for event ID " & $EventID & ", JSON error: " & @error)
                    EndIf
                Else
                    LogError("Failed to decode incidents JSON for event ID " & $EventID & ", error code: " & @error)
                EndIf
            Else
                LogError("Failed to fetch incidents for event ID " & $EventID & ", error code: " & @error)
                ConsoleWrite("Error: Failed to fetch incidents for event ID " & $EventID & ", error code: " & @error & @CRLF)
            EndIf
        EndIf

        ; Write scores and cards to SV buffers
        $HomeSVs &= ",SS,Score," & $HomeScore
        $AwaySVs &= ",SS,Score," & $AwayScore
        $HomeSVs &= ",SS,GameTime," & $GameTimeMinutes
        $AwaySVs &= ",SS,GameTime," & $GameTimeMinutes
        $HomeSVs &= ",SS,RedCards," & $HomeRedCards
        $AwaySVs &= ",SS,RedCards," & $AwayRedCards
        $HomeSVs &= ",SS,YellowCards," & $HomeYellowCards
        $AwaySVs &= ",SS,YellowCards," & $AwayYellowCards

        ; Fetch additional stats for high-quality games
        If $IsHighQuality Then
            ; Fetch H2H data
            LogMessage("DEBUG", "Fetching H2H for event ID " & $EventID)
            ConsoleWrite("Fetching H2H for event ID " & $EventID & @CRLF)
            $H2HURL = StringReplace($H2HURLTemplate, "{EventID}", $EventID)
            $H2HData = _INetGetSource($H2HURL)
            If Not @error And $H2HData <> "" Then
                $H2HObject = json_decode($H2HData)
                If Not @error Then
                    $H2HHomeWins = Json_Get($H2HObject, '.teamDuel.homeWins')
                    If @error Or $H2HHomeWins = "" Then
                        LogError("Invalid H2H home wins for event ID " & $EventID & ", raw value: " & $H2HHomeWins)
                        $H2HHomeWins = 0
                    EndIf
                    $H2HAwayWins = Json_Get($H2HObject, '.teamDuel.awayWins')
                    If @error Or $H2HAwayWins = "" Then
                        LogError("Invalid H2H away wins for event ID " & $EventID & ", raw value: " & $H2HAwayWins)
                        $H2HAwayWins = 0
                    EndIf
                    $H2HDraws = Json_Get($H2HObject, '.teamDuel.draws')
                    If @error Or $H2HDraws = "" Then
                        LogError("Invalid H2H draws for event ID " & $EventID & ", raw value: " & $H2HDraws)
                        $H2HDraws = 0
                    EndIf
                    LogMessage("DEBUG", "H2H for event ID " & $EventID & ": HomeWins=" & $H2HHomeWins & ", AwayWins=" & $H2HAwayWins & ", Draws=" & $H2HDraws)
                Else
                    LogError("Failed to decode H2H JSON for event ID " & $EventID & ", error code: " & @error)
                EndIf
            Else
                LogError("Failed to fetch H2H for event ID " & $EventID & ", error code: " & @error)
                ConsoleWrite("Error: Failed to fetch H2H for event ID " & $EventID & ", error code: " & @error & @CRLF)
            EndIf
            $HomeSVs &= ",SS,H2HHomeWins," & $H2HHomeWins & ",SS,H2HAwayWins," & $H2HAwayWins & ",SS,H2HDraws," & $H2HDraws
            $AwaySVs &= ",SS,H2HHomeWins," & $H2HHomeWins & ",SS,H2HAwayWins," & $H2HAwayWins & ",SS,H2HDraws," & $H2HDraws

            ; Fetch Pregame Form data
            LogMessage("DEBUG", "Fetching pregame form for event ID " & $EventID)
            ConsoleWrite("Fetching pregame form for event ID " & $EventID & @CRLF)
            $PregameFormURL = StringReplace($PregameFormURLTemplate, "{EventID}", $EventID)
            $PregameFormData = _INetGetSource($PregameFormURL)
            If Not @error And $PregameFormData <> "" Then
                $PregameFormObject = json_decode($PregameFormData)
                If Not @error Then
                    ; Home team form
                    $HomePosition = Json_Get($PregameFormObject, '.homeTeam.position')
                    If @error Or $HomePosition = "" Then
                        LogError("Invalid home position for event ID " & $EventID & ", raw value: " & $HomePosition)
                        $HomePosition = 0
                    EndIf
                    $HomePoints = Json_Get($PregameFormObject, '.homeTeam.value')
                    If @error Or $HomePoints = "" Then
                        LogError("Invalid home points for event ID " & $EventID & ", raw value: " & $HomePoints)
                        $HomePoints = 0
                    EndIf
                    Local $HomeFormArray = Json_Get($PregameFormObject, '.homeTeam.form')
                    If Not @error And IsArray($HomeFormArray) Then
                        For $f = 0 To UBound($HomeFormArray) - 1
                            $HomeForm &= $HomeFormArray[$f]
                        Next
                    Else
                        LogError("Invalid home form for event ID " & $EventID)
                        $HomeForm = ""
                    EndIf
                    ; Away team form
                    $AwayPosition = Json_Get($PregameFormObject, '.awayTeam.position')
                    If @error Or $AwayPosition = "" Then
                        LogError("Invalid away position for event ID " & $EventID & ", raw value: " & $AwayPosition)
                        $AwayPosition = 0
                    EndIf
                    $AwayPoints = Json_Get($PregameFormObject, '.awayTeam.value')
                    If @error Or $AwayPoints = "" Then
                        LogError("Invalid away points for event ID " & $EventID & ", raw value: " & $AwayPoints)
                        $AwayPoints = 0
                    EndIf
                    Local $AwayFormArray = Json_Get($PregameFormObject, '.awayTeam.form')
                    If Not @error And IsArray($AwayFormArray) Then
                        For $f = 0 To UBound($AwayFormArray) - 1
                            $AwayForm &= $AwayFormArray[$f]
                        Next
                    Else
                        LogError("Invalid away form for event ID " & $EventID)
                        $AwayForm = ""
                    EndIf
                    LogMessage("DEBUG", "Pregame form for event ID " & $EventID & ": HomeForm=" & $HomeForm & ", HomePosition=" & $HomePosition & ", HomePoints=" & $HomePoints & ", AwayForm=" & $AwayForm & ", AwayPosition=" & $AwayPosition & ", AwayPoints=" & $AwayPoints)
                Else
                    LogError("Failed to decode pregame form JSON for event ID " & $EventID & ", error code: " & @error)
                EndIf
            Else
                LogError("Failed to fetch pregame form for event ID " & $EventID & ", error code: " & @error)
                ConsoleWrite("Error: Failed to fetch pregame form for event ID " & $EventID & ", error code: " & @error & @CRLF)
            EndIf
            $HomeSVs &= ",SS,HomeForm," & $HomeForm & ",SS,HomePosition," & $HomePosition & ",SS,HomePoints," & $HomePoints
            $AwaySVs &= ",SS,AwayForm," & $AwayForm & ",SS,AwayPosition," & $AwayPosition & ",SS,AwayPoints," & $AwayPoints

            ; Fetch statistics data
            LogMessage("DEBUG", "Fetching stats for event ID " & $EventID)
            ConsoleWrite("Fetching stats for event ID " & $EventID & @CRLF)
            $StatsURL = StringReplace($StatsURLTemplate, "{EventID}", $EventID)
            $StatsData = _INetGetSource($StatsURL)
            If @error Then
                LogError("Failed to fetch stats for event ID " & $EventID & ", error code: " & @error)
                ConsoleWrite("Error: Failed to fetch stats for event ID " & $EventID & ", error code: " & @error & @CRLF)
                Local $Keys[13] = ["shotsOnGoal", "shotsOffGoal", "totalShotsOnGoal", "cornerKicks", "bigChanceCreated", "fouls", "goalkeeperSaves", "hitWoodwork", "totalShotsInsideBox", "totalShotsOutsideBox", "yellowCards", "expectedGoals", "ballPossession"]
                For $k In $Keys
                    Switch $k
                        Case "shotsOnGoal"
                            $HomeSVs &= ",SS,ShotsOnTarget,0"
                            $AwaySVs &= ",SS,ShotsOnTarget,0"
                        Case "shotsOffGoal"
                            $HomeSVs &= ",SS,ShotsOffTarget,0"
                            $AwaySVs &= ",SS,ShotsOffTarget,0"
                        Case "totalShotsOnGoal"
                            $HomeSVs &= ",SS,TotalShots,0"
                            $AwaySVs &= ",SS,TotalShots,0"
                        Case "ballPossession"
                            $HomeSVs &= ",SS,Possession,0"
                            $AwaySVs &= ",SS,Possession,0"
                        Case "cornerKicks"
                            $HomeSVs &= ",SS,Corners,0"
                            $AwaySVs &= ",SS,Corners,0"
                        Case "bigChanceCreated"
                            $HomeSVs &= ",SS,BigChances,0"
                            $AwaySVs &= ",SS,BigChances,0"
                        Case "fouls"
                            $HomeSVs &= ",SS,Fouls,0"
                            $AwaySVs &= ",SS,Fouls,0"
                        Case "goalkeeperSaves"
                            $HomeSVs &= ",SS,Saves,0"
                            $AwaySVs &= ",SS,Saves,0"
                        Case "hitWoodwork"
                            $HomeSVs &= ",SS,HitWoodwork,0"
                            $AwaySVs &= ",SS,HitWoodwork,0"
                        Case "totalShotsInsideBox"
                            $HomeSVs &= ",SS,ShotsInsideBox,0"
                            $AwaySVs &= ",SS,ShotsInsideBox,0"
                        Case "totalShotsOutsideBox"
                            $HomeSVs &= ",SS,ShotsOutsideBox,0"
                            $AwaySVs &= ",SS,ShotsOutsideBox,0"
                        Case "yellowCards"
                            ; Skip, as yellow cards are from incidents
                        Case "expectedGoals"
                            $HomeSVs &= ",SS,ExpectedGoals,0"
                            $AwaySVs &= ",SS,ExpectedGoals,0"
                    EndSwitch
                Next
            Else
                LogMessage("DEBUG", "Stats API response length for event ID " & $EventID & ": " & StringLen($StatsData) & " bytes")
                ConsoleWrite("Stats API response length for event ID " & $EventID & ": " & StringLen($StatsData) & " bytes, first 200 chars: " & StringLeft($StatsData, 200) & @CRLF)
                If Mod($CycleCount, 10) = 0 Then
                    Local $hDebugStatsFile = FileOpen($DebugFile & "." & $EventID, 2)
                    If $hDebugStatsFile <> -1 Then
                        FileWrite($hDebugStatsFile, $StatsData)
                        FileClose($hDebugStatsFile)
                        LogMessage("INFO", "Saved raw stats response to " & $DebugFile & "." & $EventID)
                        ConsoleWrite("Saved raw stats response to " & $DebugFile & "." & $EventID & @CRLF)
                    Else
                        LogError("Failed to write debug stats file for event ID " & $EventID & ", Windows error: " & _WinAPI_GetLastError())
                        ConsoleWrite("Error: Failed to write debug stats file for event ID " & $EventID & ", Windows error: " & _WinAPI_GetLastError() & @CRLF)
                    EndIf
                EndIf

                If $StatsData <> "" Then
                    $StatsObject = json_decode($StatsData)
                    If @error Then
                        LogError("Failed to decode stats JSON for event ID " & $EventID & ", error code: " & @error)
                        ConsoleWrite("Error: Failed to decode stats JSON for event ID " & $EventID & ", error code: " & @error & @CRLF)
                        ContinueLoop
                    EndIf
                    Local $Groups = Json_Get($StatsObject, '.statistics[0].groups')
                    If @error Then
                        LogError("Failed to access statistics groups for event ID " & $EventID & ", JSON error: " & @error)
                        ConsoleWrite("Error: Failed to access statistics groups for event ID " & $EventID & ", JSON error: " & @error & @CRLF)
                        ContinueLoop
                    EndIf
                    Local $ProcessedKeys[0]
                    For $g = 0 To UBound($Groups) - 1
                        Local $Items = Json_Get($Groups, '[' & $g & '].statisticsItems')
                        If @error Then
                            LogError("Failed to access statistics items for group " & $g & ", event ID " & $EventID & ", JSON error: " & @error)
                            ConsoleWrite("Error: Failed to access statistics items for group " & $g & ", event ID " & $EventID & ", JSON error: " & @error & @CRLF)
                            ContinueLoop
                        EndIf
                        For $s = 0 To UBound($Items) - 1
                            Local $Key = Json_Get($Items, '[' & $s & '].key')
                            If @error Or $Key = "" Then
                                LogError("Failed to access key for item " & $s & ", group " & $g & ", event ID " & $EventID & ", JSON error: " & @error)
                                ConsoleWrite("Error: Failed to access key for item " & $s & ", group " & $g & ", event ID " & $EventID & ", JSON error: " & @error & @CRLF)
                                ContinueLoop
                            EndIf
                            If _ArraySearch($ProcessedKeys, $Key) <> -1 Then
                                LogMessage("DEBUG", "Skipping duplicate stat key: " & $Key & " for event ID " & $EventID)
                                ConsoleWrite("Skipping duplicate stat key: " & $Key & " for event ID " & $EventID & @CRLF)
                                ContinueLoop
                            EndIf
                            _ArrayAdd($ProcessedKeys, $Key)
                            Local $HomeValue = Json_Get($Items, '[' & $s & '].homeValue')
                            If @error Or $HomeValue = "" Then
                                $StatWarnings &= "Invalid home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue & "\n"
                                LogError("Invalid home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue)
                                $HomeValue = "0"
                            ElseIf StringInStr($HomeValue, "%") Then
                                $HomeValue = StringReplace($HomeValue, "%", "")
                                If Not StringIsFloat($HomeValue) Then
                                    $StatWarnings &= "Invalid percentage home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue & "\n"
                                    LogError("Invalid percentage home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue)
                                    $HomeValue = "0"
                                EndIf
                            ElseIf Not StringIsFloat($HomeValue) Then
                                $StatWarnings &= "Invalid home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue & "\n"
                                LogError("Invalid home value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $HomeValue)
                                $HomeValue = "0"
                            EndIf
                            Local $AwayValue = Json_Get($Items, '[' & $s & '].awayValue')
                            If @error Or $AwayValue = "" Then
                                $StatWarnings &= "Invalid away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue & "\n"
                                LogError("Invalid away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue)
                                $AwayValue = "0"
                            ElseIf StringInStr($AwayValue, "%") Then
                                $AwayValue = StringReplace($AwayValue, "%", "")
                                If Not StringIsFloat($AwayValue) Then
                                    $StatWarnings &= "Invalid percentage away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue & "\n"
                                    LogError("Invalid percentage away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue)
                                    $AwayValue = "0"
                                EndIf
                            ElseIf Not StringIsFloat($AwayValue) Then
                                $StatWarnings &= "Invalid away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue & "\n"
                                LogError("Invalid away value for stat " & $Key & ", event ID " & $EventID & ", raw value: " & $AwayValue)
                                $AwayValue = "0"
                            EndIf
                            LogMessage("DEBUG", "Processing stat for event ID " & $EventID & ": Key=" & $Key & ", HomeValue=" & $HomeValue & ", AwayValue=" & $AwayValue)
                            ConsoleWrite("Processing stat for event ID " & $EventID & ": Key=" & $Key & ", HomeValue=" & $HomeValue & ", AwayValue=" & $AwayValue & @CRLF)
                            Switch $Key
                                Case "shotsOnGoal"
                                    $HomeSVs &= ",SS,ShotsOnTarget," & $HomeValue
                                    $AwaySVs &= ",SS,ShotsOnTarget," & $AwayValue
                                Case "shotsOffGoal"
                                    $HomeSVs &= ",SS,ShotsOffTarget," & $HomeValue
                                    $AwaySVs &= ",SS,ShotsOffTarget," & $AwayValue
                                Case "totalShotsOnGoal"
                                    $HomeSVs &= ",SS,TotalShots," & $HomeValue
                                    $AwaySVs &= ",SS,TotalShots," & $AwayValue
                                Case "ballPossession"
                                    $HomeSVs &= ",SS,Possession," & $HomeValue
                                    $AwaySVs &= ",SS,Possession," & $AwayValue
                                Case "cornerKicks"
                                    $HomeSVs &= ",SS,Corners," & $HomeValue
                                    $AwaySVs &= ",SS,Corners," & $AwayValue
                                Case "bigChanceCreated"
                                    $HomeSVs &= ",SS,BigChances," & $HomeValue
                                    $AwaySVs &= ",SS,BigChances," & $AwayValue
                                Case "fouls"
                                    $HomeSVs &= ",SS,Fouls," & $HomeValue
                                    $AwaySVs &= ",SS,Fouls," & $AwayValue
                                Case "goalkeeperSaves"
                                    $HomeSVs &= ",SS,Saves," & $HomeValue
                                    $AwaySVs &= ",SS,Saves," & $AwayValue
                                Case "hitWoodwork"
                                    $HomeSVs &= ",SS,HitWoodwork," & $HomeValue
                                    $AwaySVs &= ",SS,HitWoodwork," & $AwayValue
                                Case "totalShotsInsideBox"
                                    $HomeSVs &= ",SS,ShotsInsideBox," & $HomeValue
                                    $AwaySVs &= ",SS,ShotsInsideBox," & $AwayValue
                                Case "totalShotsOutsideBox"
                                    $HomeSVs &= ",SS,ShotsOutsideBox," & $HomeValue
                                    $AwaySVs &= ",SS,ShotsOutsideBox," & $AwayValue
                                Case "yellowCards"
                                    ; Skip, as yellow cards are from incidents
                                Case "expectedGoals"
                                    $HomeSVs &= ",SS,ExpectedGoals," & $HomeValue
                                    $AwaySVs &= ",SS,ExpectedGoals," & $AwayValue
                            EndSwitch
                        Next
                    Next
                    ; Log stat warnings
                    If $StatWarnings <> "" Then
                        Local $hDebugStatsFile = FileOpen($DebugFile & "." & $EventID & ".warnings", 2)
                        If $hDebugStatsFile <> -1 Then
                            FileWrite($hDebugStatsFile, $StatWarnings & "\nRaw Stats: " & $StatsData)
                            FileClose($hDebugStatsFile)
                            LogMessage("INFO", "Saved stat warnings to " & $DebugFile & "." & $EventID & ".warnings")
                            ConsoleWrite("Saved stat warnings to " & $DebugFile & "." & $EventID & ".warnings" & @CRLF)
                        Else
                            LogError("Failed to write stat warnings file for event ID " & $EventID & ", Windows error: " & _WinAPI_GetLastError())
                        EndIf
                    EndIf
                EndIf
            EndIf

            ; Fetch momentum graph data
            LogMessage("DEBUG", "Fetching momentum graph for event ID " & $EventID)
            ConsoleWrite("Fetching momentum graph for event ID " & $EventID & @CRLF)
            $GraphURL = StringReplace($GraphURLTemplate, "{EventID}", $EventID)
            $GraphData = _INetGetSource($GraphURL)
            Local $5MinAvgPressure = 0, $10MinAvgPressure = 0, $Momentum1 = 0
            Local $5MinPeakPressure = 0, $5MinLowPressure = 0, $MomentumTrend = 0
            If Not @error And $GraphData <> "" Then
                $GraphObject = json_decode($GraphData)
                If Not @error Then
                    Local $GraphPoints = Json_Get($GraphObject, '.graphPoints')
                    If Not @error And IsArray($GraphPoints) Then
                        Local $GraphCount = UBound($GraphPoints)
                        ; Calculate 5-minute average, peak, and low pressure
                        Local $GraphTotal = 0, $PointsCount = 0
                        Local $Peak = -999, $Low = 999
                        For $y = $GraphCount - 1 To ($GraphCount - 5 < 0 ? 0 : $GraphCount - 5) Step -1
                            Local $Value = Json_Get($GraphPoints, '[' & $y & '].value')
                            If Not @error And StringIsFloat($Value) Then
                                $GraphTotal += $Value
                                $PointsCount += 1
                                If $Value > $Peak Then $Peak = $Value
                                If $Value < $Low Then $Low = $Value
                            EndIf
                        Next
                        If $PointsCount > 0 Then
                            $5MinAvgPressure = Round($GraphTotal / $PointsCount)
                            $5MinPeakPressure = $Peak
                            $5MinLowPressure = $Low
                        EndIf
                        ; Calculate 10-minute average pressure
                        Local $GraphTotal = 0, $PointsCount = 0
                        For $y = $GraphCount - 1 To ($GraphCount - 10 < 0 ? 0 : $GraphCount - 10) Step -1
                            Local $Value = Json_Get($GraphPoints, '[' & $y & '].value')
                            If Not @error And StringIsFloat($Value) Then
                                $GraphTotal += $Value
                                $PointsCount += 1
                            EndIf
                        Next
                        If $PointsCount > 0 Then
                            $10MinAvgPressure = Round($GraphTotal / $PointsCount)
                        EndIf
                        ; Get latest momentum and trend
                        If $GraphCount > 0 Then
                            $Momentum1 = Json_Get($GraphPoints, '[' & ($GraphCount - 1) & '].value')
                            If @error Or Not StringIsFloat($Momentum1) Then $Momentum1 = 0
                            If $GraphCount > 3 Then
                                Local $SumDiff = 0, $CountDiff = 0
                                For $y = $GraphCount - 1 To $GraphCount - 4 Step -1
                                    Local $Value = Json_Get($GraphPoints, '[' & $y & '].value')
                                    Local $PrevValue = Json_Get($GraphPoints, '[' & ($y - 1) & '].value')
                                    If Not @error And Not @error And StringIsFloat($Value) And StringIsFloat($PrevValue) Then
                                        $SumDiff += ($Value - $PrevValue)
                                        $CountDiff += 1
                                    EndIf
                                Next
                                $MomentumTrend = $CountDiff > 0 ? Round($SumDiff / $CountDiff) : 0
                            EndIf
                        EndIf
                    EndIf
                Else
                    LogError("Failed to decode momentum graph JSON for event ID " & $EventID & ", error code: " & @error)
                EndIf
            Else
                LogError("Failed to fetch momentum graph for event ID " & $EventID & ", error code: " & @error)
                ConsoleWrite("Error: Failed to fetch momentum graph for event ID " & $EventID & ", error code: " & @error & @CRLF)
            EndIf
            $HomeSVs &= ",SS,5MinAvgPressure," & $5MinAvgPressure
            $AwaySVs &= ",SS,5MinAvgPressure," & -$5MinAvgPressure
            $HomeSVs &= ",SS,10MinAvgPressure," & $10MinAvgPressure
            $AwaySVs &= ",SS,10MinAvgPressure," & -$10MinAvgPressure
            $HomeSVs &= ",SS,Momentum1," & $Momentum1
            $AwaySVs &= ",SS,Momentum1," & -$Momentum1
            $HomeSVs &= ",SS,5MinPeakPressure," & $5MinPeakPressure
            $AwaySVs &= ",SS,5MinPeakPressure," & -$5MinPeakPressure
            $HomeSVs &= ",SS,5MinLowPressure," & $5MinLowPressure
            $AwaySVs &= ",SS,5MinLowPressure," & -$5MinLowPressure
            $HomeSVs &= ",SS,MomentumTrend," & $MomentumTrend
            $AwaySVs &= ",SS,MomentumTrend," & -$MomentumTrend
        Else
            ; Set default stats for low-quality games
            $HomeSVs &= ",SS,H2HHomeWins,0,SS,H2HAwayWins,0,SS,H2HDraws,0"
            $AwaySVs &= ",SS,H2HHomeWins,0,SS,H2HAwayWins,0,SS,H2HDraws,0"
            $HomeSVs &= ",SS,HomeForm,,SS,HomePosition,0,SS,HomePoints,0"
            $AwaySVs &= ",SS,AwayForm,,SS,AwayPosition,0,SS,AwayPoints,0"
            Local $Keys[13] = ["shotsOnGoal", "shotsOffGoal", "totalShotsOnGoal", "cornerKicks", "bigChanceCreated", "fouls", "goalkeeperSaves", "hitWoodwork", "totalShotsInsideBox", "totalShotsOutsideBox", "yellowCards", "expectedGoals", "ballPossession"]
            For $k In $Keys
                Switch $k
                    Case "shotsOnGoal"
                        $HomeSVs &= ",SS,ShotsOnTarget,0"
                        $AwaySVs &= ",SS,ShotsOnTarget,0"
                    Case "shotsOffGoal"
                        $HomeSVs &= ",SS,ShotsOffTarget,0"
                        $AwaySVs &= ",SS,ShotsOffTarget,0"
                    Case "totalShotsOnGoal"
                        $HomeSVs &= ",SS,TotalShots,0"
                        $AwaySVs &= ",SS,TotalShots,0"
                    Case "ballPossession"
                        $HomeSVs &= ",SS,Possession,0"
                        $AwaySVs &= ",SS,Possession,0"
                    Case "cornerKicks"
                        $HomeSVs &= ",SS,Corners,0"
                        $AwaySVs &= ",SS,Corners,0"
                    Case "bigChanceCreated"
                        $HomeSVs &= ",SS,BigChances,0"
                        $AwaySVs &= ",SS,BigChances,0"
                    Case "fouls"
                        $HomeSVs &= ",SS,Fouls,0"
                        $AwaySVs &= ",SS,Fouls,0"
                    Case "goalkeeperSaves"
                        $HomeSVs &= ",SS,Saves,0"
                        $AwaySVs &= ",SS,Saves,0"
                    Case "hitWoodwork"
                        $HomeSVs &= ",SS,HitWoodwork,0"
                        $AwaySVs &= ",SS,HitWoodwork,0"
                    Case "totalShotsInsideBox"
                        $HomeSVs &= ",SS,ShotsInsideBox,0"
                        $AwaySVs &= ",SS,ShotsInsideBox,0"
                    Case "totalShotsOutsideBox"
                        $HomeSVs &= ",SS,ShotsOutsideBox,0"
                        $AwaySVs &= ",SS,ShotsOutsideBox,0"
                    Case "yellowCards"
                        ; Skip, as yellow cards are from incidents
                    Case "expectedGoals"
                        $HomeSVs &= ",SS,ExpectedGoals,0"
                        $AwaySVs &= ",SS,ExpectedGoals,0"
                EndSwitch
            Next
            $HomeSVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
            $AwaySVs &= ",SS,5MinAvgPressure,0,SS,10MinAvgPressure,0,SS,Momentum1,0,SS,5MinPeakPressure,0,SS,5MinLowPressure,0,SS,MomentumTrend,0"
        EndIf
    EndIf

    ; Write rows to buffer
    $ScoreBuffer &= $HomeBase & $HomeSVs & @CRLF
    $ScoreBuffer &= $AwayBase & $AwaySVs & @CRLF
Next

LogMessage("INFO", "Processed " & $ProcessedEvents & " events")
ConsoleWrite("Processed " & $ProcessedEvents & " events" & @CRLF)
LogMessage("DEBUG", "ScoreBuffer content (first 500 chars): " & StringLeft($ScoreBuffer, 500))
ConsoleWrite("ScoreBuffer content (first 500 chars): " & StringLeft($ScoreBuffer, 500) & @CRLF)

; Write score.csv with retry
Local $bWritten = False
For $retry = 1 To 3
    Local $hScoreFile = FileOpen($TempScoreFile, 2)
    If $hScoreFile <> -1 Then
        FileWrite($hScoreFile, $ScoreBuffer)
        FileClose($hScoreFile)
        FileMove($TempScoreFile, $ScoreFile, 1)
        LogMessage("INFO", "Successfully wrote and moved to " & $ScoreFile & ", length: " & StringLen($ScoreBuffer) & " bytes")
        ConsoleWrite("Successfully wrote and moved to " & $ScoreFile & ", length: " & StringLen($ScoreBuffer) & " bytes" & @CRLF)
        $bWritten = True
        ExitLoop
    Else
        LogError("Retry " & $retry & ": Failed to open " & $TempScoreFile & " for writing, Windows error: " & _WinAPI_GetLastError())
        ConsoleWrite("Retry " & $retry & ": Failed to open " & $TempScoreFile & " for writing, Windows error: " & _WinAPI_GetLastError() & @CRLF)
        Sleep(2000)
    EndIf
Next

If Not $bWritten Then
    LogError("Failed to write to " & $ScoreFile & " after 3 retries")
    ConsoleWrite("Error: Failed to write to " & $ScoreFile & " after 3 retries" & @CRLF)
EndIf

; Test file write
Local $hTestFile = FileOpen($TestFile, 2)
If $hTestFile <> -1 Then
    FileWrite($hTestFile, '{"test": "success"}')
    FileClose($hTestFile)
    LogMessage("INFO", "Successfully wrote test file to " & $TestFile)
    ConsoleWrite("Successfully wrote test file to " & $TestFile & @CRLF)
Else
    LogError("Failed to write test file to " & $TestFile & ", Windows error: " & _WinAPI_GetLastError())
    ConsoleWrite("Error: Failed to write test file to " & $TestFile & ", Windows error: " & _WinAPI_GetLastError() & @CRLF)
EndIf

Local $SleepTime = $GameTimeMinutes < 45 ? $SleepFirstHalf : $SleepSecondHalf
LogMessage("INFO", "Sleeping for " & ($SleepTime / 1000) & " seconds")
ConsoleWrite("Sleeping for " & ($SleepTime / 1000) & " seconds" & @CRLF)
Sleep($SleepTime)

WEnd

Func MapTeamName($Name) LogMessage("DEBUG", "Mapping team name: " & $Name) For $i = 0 To UBound($TeamMap) - 1 If $Name = $TeamMap[$i][0] Or StringInStr($Name, $TeamMap[$i][0]) Then LogMessage("DEBUG", "Mapped " & $Name & " to " & $TeamMap[$i][1]) Return $TeamMap[$i][1] EndIf Next Local $e = StringSplit($Name, " ", $STR_NOCOUNT) If UBound($e) = 0 Then LogMessage("DEBUG", "Team name mapping
